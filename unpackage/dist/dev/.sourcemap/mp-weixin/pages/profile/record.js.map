{"version":3,"file":"record.js","sources":["pages/profile/record.vue","../../HBuilderX.4.64.2025042916/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvcHJvZmlsZS9yZWNvcmQudnVl"],"sourcesContent":["<template>\n  <view class=\"record-container\">\n    <!-- 搜索和筛选 -->\n   <!-- <view class=\"search-filter\">\n      <input class=\"search-input\" v-model=\"searchText\" placeholder=\"搜索害虫名称\" @input=\"filterRecords\" />\n      <picker :range=\"timeOptions\" :value=\"timeFilter\" @change=\"onTimeChange\">\n        <view class=\"filter-btn\">{{ timeOptions[timeFilter] }}</view>\n      </picker>\n      <picker :range=\"confidenceOptions\" :value=\"confidenceFilter\" @change=\"onConfidenceChange\">\n        <view class=\"filter-btn\">{{ confidenceOptions[confidenceFilter] }}</view>\n      </picker>\n    </view> -->\n\n    <!-- 数据统计 -->\n    <view class=\"stat-section\">\n      <text>本月识别：{{ stat.count }} 次，常见类型：{{ stat.topType }}</text>\n    </view>\n\n    <!-- 识别记录列表 -->\n    <view v-if=\"filteredRecords.length === 0\" class=\"empty-tip\">暂无识别记录</view>\n    <view v-for=\"item in filteredRecords\" :key=\"item.id\" class=\"record-row\">\n      <image :src=\"getImageUrl(item.image_url)\" class=\"record-img\"\r\n        @click=\"previewImage(item.image_url)\"  />\n      <view class=\"record-info\">\n        <view class=\"record-title\">{{ item.pest_name }}</view>\n        <view class=\"record-meta\">\n          <text>{{ formatDate(item.detection_time) }}</text>\n        </view>\n        <view class=\"record-meta\">\n          <text class=\"confidence\">{{ formatConfidence(item.confidence) }}匹配</text>\n        </view>\n      </view>\r\n\t<view class=\"record-actions\">\r\n\t  <button @click=\"viewDetail(item)\">详情</button>\r\n\t  <!-- <button @click=\"deleteRecord(item)\">删除</button> -->\r\n\t</view>\n    </view>\n  </view>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { getRecords, getImageUrl } from './api.js'\r\nimport { formatDate } from '../../utils/common.js'\n\n// 响应式数据\nconst records = ref([])\nconst searchText = ref('')\nconst timeOptions = ref(['全部', '最近一周', '最近一个月'])\nconst timeFilter = ref(0)\nconst confidenceOptions = ref(['默认排序', '高可信度优先', '低可信度优先'])\nconst confidenceFilter = ref(0)\nconst filteredRecords = ref([])\nconst stat = ref({\n  count: 0,\n  topType: ''\n})\n\n// 新增图片预览方法\nconst previewImage = (imageUrl) => {\n  const fullUrl = getImageUrl(imageUrl)\n  uni.previewImage({\n    urls: [fullUrl], // 支持多张图片预览，这里我们只传当前图片\n    current: fullUrl // 当前显示图片的链接\n  })\n}\n// 添加格式化可信度的方法\nconst formatConfidence = (confidence) => {\n  // 如果已经是字符串且包含%，直接返回\n  if (typeof confidence === 'string' && confidence.includes('%')) {\n    return confidence\n  }\n  // 如果是小数，转换为百分数\n  const num = parseFloat(confidence)\n  if (!isNaN(num)) {\n    return `${Math.round(num * 100)}%`\n  }\n  // 其他情况原样返回\n  return confidence\n}\n// 方法\nconst fixDateStr = (str) => {\n  if (!str) return ''\n  return str.replace(/-/g, '/').replace(/(\\d{2}:\\d{2})$/, '$1:00')\n}\n\nconst filterRecords = () => {\n  let list = [...records.value]\n  \n  // 搜索筛选\n  if (searchText.value) {\n    list = list.filter(r => r.name.includes(searchText.value))\n  }\n  \n  // 时间筛选\n  if (timeFilter.value === 1) {\n    const weekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000\n    list = list.filter(r => new Date(fixDateStr(r.time)).getTime() > weekAgo)\n  } else if (timeFilter.value === 2) {\n    const monthAgo = Date.now() - 30 * 24 * 60 * 60 * 1000\n    list = list.filter(r => new Date(fixDateStr(r.time)).getTime() > monthAgo)\n  }\n  \n  // 可信度排序\n  if (confidenceFilter.value === 1) {\n    list.sort((a, b) => parseInt(b.confidence) - parseInt(a.confidence))\n  } else if (confidenceFilter.value === 2) {\n    list.sort((a, b) => parseInt(a.confidence) - parseInt(b.confidence))\n  }\n  \n  filteredRecords.value = list\n}\n\nconst onTimeChange = (e) => {\n  timeFilter.value = e.detail.value\n  filterRecords()\n}\n\nconst onConfidenceChange = (e) => {\n  confidenceFilter.value = e.detail.value\n  filterRecords()\n}\n\nconst viewDetail = (item) => {\n  uni.navigateTo({ url: `/pages/pestDetail/pestDetail?pestId=${item.pest_id}` })\n}\n\nconst deleteRecord = (item) => {\n  uni.showModal({\n    title: '确认删除',\n    content: '确定要删除该识别记录吗？',\n    success: (res) => {\n      if (res.confirm) {\n        records.value = records.value.filter(r => r.id !== item.id)\n        filterRecords()\n        calcStat()\n      }\n    }\n  })\n}\n\nconst calcStat = () => {\n  const now = new Date()\n  const currentMonth = now.getMonth() + 1\n  const currentYear = now.getFullYear()\n  \n  const monthRecords = records.value.filter(r => {\n    const recordDate = new Date(r.detection_time)\n    return (\n      recordDate.getMonth() + 1 === currentMonth && \n      recordDate.getFullYear() === currentYear\n    )\n  })\n  \n  stat.value.count = monthRecords.length\n  \n  const typeCount = {}\n  monthRecords.forEach(r => {\n    typeCount[r.pest_name] = (typeCount[r.pest_name] || 0) + 1\n  })\n  \n  let topType = ''\n  let max = 0\n  for (const k in typeCount) {\n    if (typeCount[k] > max) {\n      max = typeCount[k]\n      topType = k\n    }\n  }\n  \n  stat.value.topType = topType \n    ? `${Math.round((max / (monthRecords.length || 1)) * 100)}%是${topType}` \n    : '无'\n}\n// 生命周期钩子\nonMounted(async () => {\n  const response = await getRecords()\n  records.value = response.data\n  filterRecords()\n  calcStat()\n})\n</script>\n\n<style scoped>\n.record-container {\n  padding: 32rpx 24rpx 32rpx 24rpx;\n  background: #f8f9fb;\n  min-height: 100vh;\n}\n.search-filter {\n  display: flex;\n  align-items: center;\n  margin-bottom: 18rpx;\n}\n.search-input {\n  flex: 1;\n  font-size: 26rpx;\n  border: 1rpx solid #eee;\n  border-radius: 8rpx;\n  padding: 8rpx 12rpx;\n  background: #fafafa;\n  margin-right: 12rpx;\n}\n.filter-btn {\n  font-size: 24rpx;\n  color: #2d2e3a;\n  background: #eee;\n  border-radius: 8rpx;\n  padding: 8rpx 16rpx;\n  margin-right: 8rpx;\n}\n.stat-section {\n  font-size: 24rpx;\n  color: #888;\n  margin-bottom: 18rpx;\n}\n.empty-tip {\n  color: #bbb;\n  font-size: 24rpx;\n  text-align: center;\n  margin: 32rpx 0;\n}\n.record-row {\n  display: flex;\n  align-items: center;\n  border-bottom: 1rpx solid #f0f0f0;\n  padding: 18rpx 0;\n}\n.record-img {\n  width: 100rpx;\n  height: 100rpx;\n  border-radius: 12rpx;\n  margin-right: 18rpx;\n  object-fit: cover;\n}\n.record-info {\n  flex: 1;\n}\n.record-title {\n  font-size: 28rpx;\n  color: #222;\n  font-weight: bold;\n}\n.record-meta {\n  font-size: 24rpx;\n  color: #888;\n  margin: 4rpx 0;\n  display: flex;\n  justify-content: space-between;\n}\n.confidence {\n  color: #4caf50;\n}\n.record-actions {\n  display: flex;\n  gap: 12rpx;\n  margin-top: 8rpx;\r\n  flex-direction: row;\n}\n.record-actions button {\n  font-size: 16rpx;\n  padding: 4rpx 16rpx;\n  border-radius: 8rpx;\n  background: #e5d3b6;\n  color: #7d5c1e;\n  border: none;\n}\n</style>","import MiniProgramPage from 'D:/Projects/frontend/pages/profile/record.vue'\nwx.createPage(MiniProgramPage)"],"names":["ref","getImageUrl","uni","onMounted","getRecords"],"mappings":"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"}