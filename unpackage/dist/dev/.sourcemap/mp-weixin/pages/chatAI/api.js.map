{"version":3,"file":"api.js","sources":["pages/chatAI/api.js"],"sourcesContent":["/**\r\n * AI聊天API接口\r\n * 包含AI对话、历史记录管理、后端API连接等功能\r\n */\r\n\r\nimport { getApiUrl, getHeaders, request, uploadFile } from '../../utils/apiConfig.js';\r\n\r\n/**\r\n * 发送AI对话消息\r\n * @param {Object} messageData - 消息数据\r\n * @param {String} messageData.content - 消息内容\r\n * @param {String} messageData.type - 消息类型 (user/ai)\r\n * @param {String} messageData.time - 消息时间\r\n * @param {Boolean} messageData.hasQuote - 是否包含引用\r\n * @returns {Promise} 返回AI回复\r\n */\r\nexport const sendAIMessage = (data) =>\r\n  request({ url: '/chat/send', method: 'POST', data });\r\n\r\n/**\r\n * 保存对话到后端\r\n * @param {Object} chatData - 对话数据\r\n * @param {String} chatData.id - 对话ID\r\n * @param {String} chatData.title - 对话标题\r\n * @param {String} chatData.lastTime - 最后更新时间\r\n * @param {Array} chatData.messages - 消息列表\r\n * @returns {Promise} 保存结果\r\n */\r\nexport const saveChatToBackend = (chat) =>\r\n  request({ url: '/chat/save', method: 'POST', data: chat });\r\n\r\n/**\r\n * 从后端加载历史对话列表\r\n * @param {Object} params - 请求参数\r\n * @returns {Promise} 返回历史对话列表\r\n */\r\nexport const loadHistoryChats = (params = {}) =>\r\n  request({ url: '/chat/conversations', method: 'GET', data: params });\r\n\r\n/**\r\n * 获取指定对话详情\r\n * @param {String} chatId - 对话ID\r\n * @returns {Promise} 返回对话详情\r\n */\r\nexport const getChatDetail = (chatId) => {\r\n  return request({\r\n    url: `/chat/conversation`,\r\n    method: 'GET',\r\n\tdata: {\r\n\t\t\"conversation_id\": chatId\r\n\t}\r\n  });\r\n};\r\n\r\n/**\r\n * 删除对话\r\n * @param {String} chatId - 对话ID\r\n * @returns {Promise} 返回删除结果\r\n */\r\nexport const deleteChat = (chatId) =>\r\n  request({ url: `/chat/${chatId}`, method: 'DELETE' });\r\n\r\n/**\r\n * 搜索对话内容\r\n * @param {String} keyword - 搜索关键词\r\n * @param {String} filterType - 筛选类型 (all/today/week/month)\r\n * @returns {Promise} 返回搜索结果\r\n */\r\nexport const searchChats = (keyword, filterType = 'all') =>\r\n  request({ url: '/chat/search', method: 'GET', data: { keyword, filterType } });\r\n\r\n/**\r\n * 设置选中的对话（临时存储）\r\n * @param {Object} chat - 对话数据\r\n */\r\nexport const setSelectedChat = (chat) => {\r\n  try { uni.setStorageSync('selectedChat', chat); } catch (e) { console.error('设置选中对话失败', e); }\r\n};\r\n\r\n/**\r\n * 获取选中的对话\r\n * @returns {Object|null} 选中的对话\r\n */\r\nexport const getSelectedChat = (id) => {\r\n  try {\r\n    const chat = uni.getStorageSync('selectedChat');\r\n    if (chat) uni.removeStorageSync('selectedChat');\r\n    return chat || null;\r\n  } catch (e) { console.error('获取选中对话失败', e); return null; }\r\n};\r\n\r\n/**\r\n * 复制消息到剪贴板\r\n * @param {String} content - 消息内容\r\n * @returns {Promise} 复制结果\r\n */\r\nexport const copyMessage = (content) =>\r\n  new Promise((resolve, reject) => {\r\n    uni.setClipboardData({\r\n      data: content,\r\n      success: () => resolve({ success: true }),\r\n      fail: () => reject(new Error('复制失败'))\r\n    });\r\n  });\r\n\r\n/**\r\n * 提交反馈\r\n * @param {Object} feedbackData - 反馈数据\r\n * @param {String} feedbackData.type - 反馈类型\r\n * @param {String} feedbackData.message - 反馈消息\r\n * @param {String} feedbackData.chatId - 对话ID\r\n * @returns {Promise} 提交结果\r\n */\r\nexport const submitFeedback = (feedback) =>\r\n  request({ url: '/chat/feedback', method: 'POST', data: feedback });\r\n\r\n/**\r\n * 获取当前时间\r\n * @returns {String} 当前时间字符串 (HH:MM)\r\n */\r\nexport const getCurrentTime = () => {\r\n  const now = new Date();\r\n  return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\r\n};\r\n\r\n/**\r\n * 获取当前日期时间\r\n * @returns {String} 当前日期时间字符串 (YYYY-MM-DD HH:MM)\r\n */\r\nexport const getCurrentDateTime = () => {\r\n  const now = new Date();\r\n  return `${now.getFullYear()}-${(now.getMonth()+1).toString().padStart(2,'0')}-${now.getDate().toString().padStart(2,'0')} ${now.getHours().toString().padStart(2,'0')}:${now.getMinutes().toString().padStart(2,'0')}`;\r\n};\r\n\r\n/**\r\n * 生成对话ID\r\n * @returns {String} 对话ID\r\n */\r\nexport const generateChatId = () => 'chat' + Date.now();\r\n\r\n/**\r\n * 获取对话标题\r\n * @param {Array} messages - 消息列表\r\n * @returns {String} 对话标题\r\n */\r\nexport const getChatTitle = (messages) => {\r\n  const userMsg = messages.find(msg => msg.type === 'user');\r\n  if (userMsg) return userMsg.content.length > 20 ? userMsg.content.slice(0, 20) + '...' : userMsg.content;\r\n  return '新对话';\r\n};\r\n\r\n/**\r\n * 获取消息预览文本\r\n * @param {Array} messages - 消息列表\r\n * @returns {String} 预览文本\r\n */\r\nexport const getMessagePreview = (messages) => {\r\n  if (!messages.length) return '';\r\n  const text = messages[messages.length - 1].content;\r\n  return text.length > 30 ? text.slice(0, 30) + '...' : text;\r\n};\r\n\r\n/**\r\n * 图片识别API\r\n * @param {String} imagePath - 图片路径\r\n * @param {Object} params - 请求参数\r\n * @returns {Promise} 返回识别结果\r\n */\r\nexport const identifyImage = (imagePath, params = {}) => {\r\n  return uploadFile({\r\n    url: '/chat/identify',\r\n    filePath: imagePath,\r\n    formData: params\r\n  });\r\n};\r\n\r\n/**\r\n * 用户登录\r\n * @param {Object} loginData - 登录数据\r\n * @returns {Promise} 返回登录结果\r\n */\r\nexport const userLogin = (loginData) => {\r\n  return request({\r\n    url: '/auth/login',\r\n    method: 'POST',\r\n    data: loginData,\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n};\r\n\r\n/**\r\n * 获取用户信息\r\n * @returns {Promise} 返回用户信息\r\n */\r\nexport const getUserInfo = () => {\r\n  return request({\r\n    url: '/user/info',\r\n    method: 'GET'\r\n  });\r\n};\r\n\r\n/**\r\n * 更新用户信息\r\n * @param {Object} userData - 用户数据\r\n * @returns {Promise} 返回更新结果\r\n */\r\nexport const updateUserInfo = (userData) => {\r\n  return request({\r\n    url: '/user/info',\r\n    method: 'PUT',\r\n    data: userData\r\n  });\r\n};\r\n\r\nexport default {\r\n  sendAIMessage,\r\n  saveChatToBackend,\r\n  loadHistoryChats,\r\n  getChatDetail,\r\n  deleteChat,\r\n  searchChats,\r\n  setSelectedChat,\r\n  getSelectedChat,\r\n  copyMessage,\r\n  submitFeedback,\r\n  getCurrentTime,\r\n  getCurrentDateTime,\r\n  generateChatId,\r\n  getChatTitle,\r\n  getMessagePreview,\r\n  identifyImage,\r\n  userLogin,\r\n  getUserInfo,\r\n  updateUserInfo\r\n}; "],"names":["request","uni"],"mappings":";;;AAgBY,MAAC,gBAAgB,CAAC,SAC5BA,gBAAO,QAAC,EAAE,KAAK,cAAc,QAAQ,QAAQ,MAAM;AAWzC,MAAC,oBAAoB,CAAC,SAChCA,gBAAO,QAAC,EAAE,KAAK,cAAc,QAAQ,QAAQ,MAAM,MAAM;AAO/C,MAAC,mBAAmB,CAAC,SAAS,CAAE,MAC1CA,gBAAO,QAAC,EAAE,KAAK,uBAAuB,QAAQ,OAAO,MAAM,QAAQ;AAOzD,MAAC,gBAAgB,CAAC,WAAW;AACvC,SAAOA,wBAAQ;AAAA,IACb,KAAK;AAAA,IACL,QAAQ;AAAA,IACX,MAAM;AAAA,MACL,mBAAmB;AAAA,IACnB;AAAA,EACF,CAAG;AACH;AAgBY,MAAC,cAAc,CAAC,SAAS,aAAa,UAChDA,wBAAQ,EAAE,KAAK,gBAAgB,QAAQ,OAAO,MAAM,EAAE,SAAS,WAAU,GAAI;AAMnE,MAAC,kBAAkB,CAAC,SAAS;AACvC,MAAI;AAAEC,kBAAG,MAAC,eAAe,gBAAgB,IAAI;AAAA,EAAE,SAAU,GAAG;AAAEA,oEAAc,YAAY,CAAC;AAAA,EAAI;AAC/F;AAMY,MAAC,kBAAkB,CAAC,OAAO;AACrC,MAAI;AACF,UAAM,OAAOA,cAAAA,MAAI,eAAe,cAAc;AAC9C,QAAI;AAAMA,oBAAAA,MAAI,kBAAkB,cAAc;AAC9C,WAAO,QAAQ;AAAA,EAChB,SAAQ,GAAG;AAAEA,kBAAA,MAAA,MAAA,SAAA,6BAAc,YAAY,CAAC;AAAG,WAAO;AAAA,EAAO;AAC5D;AAOY,MAAC,cAAc,CAAC,YAC1B,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/BA,gBAAAA,MAAI,iBAAiB;AAAA,IACnB,MAAM;AAAA,IACN,SAAS,MAAM,QAAQ,EAAE,SAAS,KAAI,CAAE;AAAA,IACxC,MAAM,MAAM,OAAO,IAAI,MAAM,MAAM,CAAC;AAAA,EAC1C,CAAK;AACL,CAAG;AAUS,MAAC,iBAAiB,CAAC,aAC7BD,gBAAO,QAAC,EAAE,KAAK,kBAAkB,QAAQ,QAAQ,MAAM,SAAU,CAAA;;;;;;;;;;"}