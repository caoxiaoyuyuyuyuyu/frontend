{"version":3,"file":"api.js","sources":["pages/chatAI/api.js"],"sourcesContent":["/**\r\n * AI聊天API接口\r\n * 包含AI对话、历史记录管理、后端API连接等功能\r\n */\r\n\r\n// 基础配置\r\nconst BASE_URL = 'http://192.168.241.56:5000'; // 后端API地址\r\nconst API_VERSION = 'api';\r\n\r\n/**\r\n * 发送AI对话消息\r\n * @param {Object} messageData - 消息数据\r\n * @param {String} messageData.content - 消息内容\r\n * @param {String} messageData.type - 消息类型 (user/ai)\r\n * @param {String} messageData.time - 消息时间\r\n * @param {Boolean} messageData.hasQuote - 是否包含引用\r\n * @returns {Promise} 返回AI回复\r\n */\r\nexport const sendAIMessage = (messageData) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/send`,\r\n      method: 'POST',\r\n      data: messageData,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '发送消息失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 保存对话到后端\r\n * @param {Object} chatData - 对话数据\r\n * @param {String} chatData.id - 对话ID\r\n * @param {String} chatData.title - 对话标题\r\n * @param {String} chatData.lastTime - 最后更新时间\r\n * @param {Array} chatData.messages - 消息列表\r\n * @returns {Promise} 保存结果\r\n */\r\nexport const saveChatToBackend = (chatData) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/save`,\r\n      method: 'POST',\r\n      data: chatData,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '保存对话失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 从后端加载历史对话列表\r\n * @param {Object} params - 请求参数\r\n * @returns {Promise} 返回历史对话列表\r\n */\r\nexport const loadHistoryChats = (params = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/history`,\r\n      method: 'GET',\r\n      data: params,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '获取历史记录失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取指定对话详情\r\n * @param {String} chatId - 对话ID\r\n * @returns {Promise} 返回对话详情\r\n */\r\nexport const getChatDetail = (chatId) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/${chatId}`,\r\n      method: 'GET',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '获取对话详情失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 删除对话\r\n * @param {String} chatId - 对话ID\r\n * @returns {Promise} 返回删除结果\r\n */\r\nexport const deleteChat = (chatId) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/${chatId}`,\r\n      method: 'DELETE',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '删除对话失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 清空所有对话\r\n * @returns {Promise} 返回清空结果\r\n */\r\nexport const clearAllChats = () => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/clear-all`,\r\n      method: 'DELETE',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '清空对话失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 搜索对话内容\r\n * @param {String} keyword - 搜索关键词\r\n * @param {String} filterType - 筛选类型 (all/today/week/month)\r\n * @returns {Promise} 返回搜索结果\r\n */\r\nexport const searchChats = (keyword, filterType = 'all') => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/search`,\r\n      method: 'GET',\r\n      data: {\r\n        keyword: keyword,\r\n        filterType: filterType\r\n      },\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '搜索对话失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 设置选中的对话（临时存储）\r\n * @param {Object} chat - 对话数据\r\n */\r\nexport const setSelectedChat = (chat) => {\r\n  try {\r\n    uni.setStorageSync('selectedChat', chat);\r\n  } catch (error) {\r\n    console.error('设置选中对话失败:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * 获取选中的对话\r\n * @returns {Object|null} 选中的对话\r\n */\r\nexport const getSelectedChat = () => {\r\n  try {\r\n    const selectedChat = uni.getStorageSync('selectedChat');\r\n    if (selectedChat) {\r\n      uni.removeStorageSync('selectedChat');\r\n      return selectedChat;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('获取选中对话失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 复制消息到剪贴板\r\n * @param {String} content - 消息内容\r\n * @returns {Promise} 复制结果\r\n */\r\nexport const copyMessage = (content) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.setClipboardData({\r\n      data: content,\r\n      success: () => {\r\n        resolve({ success: true });\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('复制失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 提交反馈\r\n * @param {Object} feedbackData - 反馈数据\r\n * @param {String} feedbackData.type - 反馈类型\r\n * @param {String} feedbackData.message - 反馈消息\r\n * @param {String} feedbackData.chatId - 对话ID\r\n * @returns {Promise} 提交结果\r\n */\r\nexport const submitFeedback = (feedbackData) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/feedback`,\r\n      method: 'POST',\r\n      data: feedbackData,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '提交反馈失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取当前时间\r\n * @returns {String} 当前时间字符串 (HH:MM)\r\n */\r\nexport const getCurrentTime = () => {\r\n  const now = new Date();\r\n  const hours = now.getHours().toString().padStart(2, '0');\r\n  const minutes = now.getMinutes().toString().padStart(2, '0');\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\n/**\r\n * 获取当前日期时间\r\n * @returns {String} 当前日期时间字符串 (YYYY-MM-DD HH:MM)\r\n */\r\nexport const getCurrentDateTime = () => {\r\n  const now = new Date();\r\n  const year = now.getFullYear();\r\n  const month = (now.getMonth() + 1).toString().padStart(2, '0');\r\n  const day = now.getDate().toString().padStart(2, '0');\r\n  const hours = now.getHours().toString().padStart(2, '0');\r\n  const minutes = now.getMinutes().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};\r\n\r\n/**\r\n * 生成对话ID\r\n * @returns {String} 对话ID\r\n */\r\nexport const generateChatId = () => {\r\n  return 'chat' + Date.now();\r\n};\r\n\r\n/**\r\n * 获取对话标题\r\n * @param {Array} messages - 消息列表\r\n * @returns {String} 对话标题\r\n */\r\nexport const getChatTitle = (messages) => {\r\n  const userMessages = messages.filter(msg => msg.type === 'user');\r\n  if (userMessages.length > 0) {\r\n    const firstUserMessage = userMessages[0];\r\n    return firstUserMessage.content.length > 20 \r\n      ? firstUserMessage.content.substring(0, 20) + '...' \r\n      : firstUserMessage.content;\r\n  }\r\n  return '新对话';\r\n};\r\n\r\n/**\r\n * 获取消息预览文本\r\n * @param {Array} messages - 消息列表\r\n * @returns {String} 预览文本\r\n */\r\nexport const getMessagePreview = (messages) => {\r\n  if (messages.length === 0) return '';\r\n  const lastMessage = messages[messages.length - 1];\r\n  const text = lastMessage.content;\r\n  return text.length > 30 ? text.substring(0, 30) + '...' : text;\r\n};\r\n\r\n/**\r\n * 图片识别API\r\n * @param {String} imagePath - 图片路径\r\n * @param {Object} params - 请求参数\r\n * @returns {Promise} 返回识别结果\r\n */\r\nexport const identifyImage = (imagePath, params = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.uploadFile({\r\n      url: `${BASE_URL}/${API_VERSION}/chat/identify`,\r\n      filePath: imagePath,\r\n      name: 'image',\r\n      formData: params,\r\n      header: {\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          const data = JSON.parse(res.data);\r\n          resolve(data);\r\n        } else {\r\n          reject(new Error('图片识别失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 用户登录\r\n * @param {Object} loginData - 登录数据\r\n * @returns {Promise} 返回登录结果\r\n */\r\nexport const userLogin = (loginData) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/auth/login`,\r\n      method: 'POST',\r\n      data: loginData,\r\n      header: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '登录失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 用户注册\r\n * @param {Object} registerData - 注册数据\r\n * @returns {Promise} 返回注册结果\r\n */\r\nexport const userRegister = (registerData) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/auth/register`,\r\n      method: 'POST',\r\n      data: registerData,\r\n      header: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '注册失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取用户信息\r\n * @returns {Promise} 返回用户信息\r\n */\r\nexport const getUserInfo = () => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/user/info`,\r\n      method: 'GET',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '获取用户信息失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 更新用户信息\r\n * @param {Object} userData - 用户数据\r\n * @returns {Promise} 返回更新结果\r\n */\r\nexport const updateUserInfo = (userData) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${BASE_URL}/${API_VERSION}/user/info`,\r\n      method: 'PUT',\r\n      data: userData,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${uni.getStorageSync('token') || ''}`\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(new Error(res.data.message || '更新用户信息失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport default {\r\n  sendAIMessage,\r\n  saveChatToBackend,\r\n  loadHistoryChats,\r\n  getChatDetail,\r\n  deleteChat,\r\n  clearAllChats,\r\n  searchChats,\r\n  setSelectedChat,\r\n  getSelectedChat,\r\n  copyMessage,\r\n  submitFeedback,\r\n  getCurrentTime,\r\n  getCurrentDateTime,\r\n  generateChatId,\r\n  getChatTitle,\r\n  getMessagePreview,\r\n  identifyImage,\r\n  userLogin,\r\n  userRegister,\r\n  getUserInfo,\r\n  updateUserInfo\r\n}; "],"names":["uni"],"mappings":"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"}