{"version":3,"file":"apiConfig.js","sources":["utils/apiConfig.js"],"sourcesContent":["/**\r\n * API配置文件\r\n * 统一管理所有API的基础配置\r\n */\r\n\r\n// API基础配置\r\nexport const API_CONFIG = {\r\n  // 基础URL\r\n  BASE_URL: 'http://192.168.241.56:5000',\r\n  \r\n  // API版本\r\n  API_VERSION: 'api',\r\n  \r\n  // 请求超时时间（毫秒）\r\n  TIMEOUT: 10000,\r\n  \r\n  // 重试次数\r\n  RETRY_TIMES: 3,\r\n  \r\n  // 重试延迟（毫秒）\r\n  RETRY_DELAY: 1000\r\n};\r\n\r\n/**\r\n * 获取完整的API URL\r\n * @param {String} endpoint - API端点\r\n * @returns {String} 完整的API URL\r\n */\r\nexport const getApiUrl = (endpoint) => {\r\n  return `${API_CONFIG.BASE_URL}/${API_CONFIG.API_VERSION}${endpoint}`;\r\n};\r\n\r\n/**\r\n * 获取请求头\r\n * @param {Object} customHeaders - 自定义请求头\r\n * @returns {Object} 请求头对象\r\n */\r\nexport const getHeaders = (customHeaders = {}) => {\r\n  const token = uni.getStorageSync('token');\r\n  const defaultHeaders = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  };\r\n  \r\n  if (token) {\r\n    defaultHeaders['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  \r\n  return { ...defaultHeaders, ...customHeaders };\r\n};\r\n\r\n/**\r\n * 统一错误处理\r\n * @param {Error} error - 错误对象\r\n * @param {String} defaultMessage - 默认错误消息\r\n */\r\nexport const handleApiError = (error, defaultMessage = '请求失败') => {\r\n  console.error('API Error:', error);\r\n  \r\n  let message = defaultMessage;\r\n  if (error.message) {\r\n    message = error.message;\r\n  }\r\n  \r\n  // 显示错误提示\r\n  uni.showToast({\r\n    title: message,\r\n    icon: 'none',\r\n    duration: 2000\r\n  });\r\n  \r\n  return Promise.reject(error);\r\n};\r\n\r\n/**\r\n * 请求拦截器\r\n * @param {Object} config - 请求配置\r\n * @returns {Object} 处理后的配置\r\n */\r\nexport const requestInterceptor = (config) => {\r\n  // 添加时间戳防止缓存\r\n  if (config.method === 'GET') {\r\n    config.data = {\r\n      ...config.data,\r\n      _t: Date.now()\r\n    };\r\n  }\r\n  \r\n  return config;\r\n};\r\n\r\n/**\r\n * 响应拦截器\r\n * @param {Object} response - 响应对象\r\n * @returns {Object} 处理后的响应\r\n */\r\nexport const responseInterceptor = (response) => {\r\n  // 统一处理响应\r\n  if (response.statusCode === 200) {\r\n    return response.data;\r\n  } else if (response.statusCode === 401) {\r\n    // 未授权，清除token并弹窗跳转到登录页\r\n    uni.removeStorageSync('token');\r\n    uni.showModal({\r\n      title: '提示',\r\n      content: '登录已过期，请重新登录',\r\n      showCancel: false,\r\n      confirmText: '去登录',\r\n      success: (res) => {\r\n        if (res.confirm) {\r\n          uni.navigateTo({\r\n            url: '/pages/login/login'\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return Promise.reject(new Error('登录已过期'));\r\n  } else if (response.statusCode === 403) {\r\n    return Promise.reject(new Error('没有权限访问'));\r\n  } else if (response.statusCode >= 500) {\r\n    return Promise.reject(new Error('服务器错误'));\r\n  } else {\r\n    return Promise.reject(new Error(response.data?.message || '请求失败'));\r\n  }\r\n};\r\n\r\n/**\r\n * 通用请求方法\r\n * @param {Object} options - 请求选项\r\n * @returns {Promise} 请求Promise\r\n */\r\nexport const request = (options) => {\r\n  const { url, method = 'GET', data = {}, headers = {}, ...rest } = options;\r\n  \r\n  // 应用请求拦截器\r\n  const config = requestInterceptor({\r\n    url: getApiUrl(url),\r\n    method,\r\n    data,\r\n    header: getHeaders(headers),\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    ...rest\r\n  });\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      ...config,\r\n      success: (response) => {\r\n        try {\r\n          const result = responseInterceptor(response);\r\n          resolve(result);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      },\r\n      fail: (error) => {\r\n        const apiError = new Error('网络请求失败');\r\n        apiError.originalError = error;\r\n        reject(apiError);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 文件上传方法\r\n * @param {Object} options - 上传选项\r\n * @returns {Promise} 上传Promise\r\n */\r\nexport const uploadFile = (options) => {\r\n  const { url, filePath, name = 'file', formData = {}, headers = {}, ...rest } = options;\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    uni.uploadFile({\r\n      url: getApiUrl(url),\r\n      filePath,\r\n      name,\r\n      formData,\r\n      header: getHeaders(headers),\r\n      timeout: API_CONFIG.TIMEOUT,\r\n      ...rest,\r\n      success: (response) => {\r\n        try {\r\n          if (response.statusCode === 200) {\r\n            const data = JSON.parse(response.data);\r\n            resolve(data);\r\n          } else {\r\n            reject(new Error('文件上传失败'));\r\n          }\r\n        } catch (error) {\r\n          reject(new Error('文件上传失败'));\r\n        }\r\n      },\r\n      fail: (error) => {\r\n        reject(new Error('网络请求失败'));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 带重试的请求方法\r\n * @param {Function} requestFn - 请求函数\r\n * @param {Number} retryTimes - 重试次数\r\n * @returns {Promise} 请求Promise\r\n */\r\nexport const requestWithRetry = async (requestFn, retryTimes = API_CONFIG.RETRY_TIMES) => {\r\n  let lastError;\r\n  \r\n  for (let i = 0; i <= retryTimes; i++) {\r\n    try {\r\n      return await requestFn();\r\n    } catch (error) {\r\n      lastError = error;\r\n      \r\n      if (i < retryTimes) {\r\n        // 等待一段时间后重试\r\n        await new Promise(resolve => setTimeout(resolve, API_CONFIG.RETRY_DELAY * (i + 1)));\r\n      }\r\n    }\r\n  }\r\n  \r\n  throw lastError;\r\n};\r\n\r\nexport default {\r\n  API_CONFIG,\r\n  getApiUrl,\r\n  getHeaders,\r\n  handleApiError,\r\n  request,\r\n  uploadFile,\r\n  requestWithRetry\r\n}; "],"names":["uni"],"mappings":";;AAMO,MAAM,aAAa;AAAA;AAAA,EAExB,UAAU;AAAA;AAAA,EAGV,aAAa;AAAA;AAAA,EAGb,SAAS;AAAA;AAAA,EAGT,aAAa;AAAA;AAAA,EAGb,aAAa;AACf;AAOY,MAAC,YAAY,CAAC,aAAa;AACrC,SAAO,GAAG,WAAW,QAAQ,IAAI,WAAW,WAAW,GAAG,QAAQ;AACpE;AAOO,MAAM,aAAa,CAAC,gBAAgB,OAAO;AAChD,QAAM,QAAQA,cAAAA,MAAI,eAAe,OAAO;AACxC,QAAM,iBAAiB;AAAA,IACrB,gBAAgB;AAAA,IAChB,UAAU;AAAA,EACd;AAEE,MAAI,OAAO;AACT,mBAAe,eAAe,IAAI,UAAU,KAAK;AAAA,EAClD;AAED,SAAO,EAAE,GAAG,gBAAgB,GAAG;AACjC;AA8BO,MAAM,qBAAqB,CAAC,WAAW;AAE5C,MAAI,OAAO,WAAW,OAAO;AAC3B,WAAO,OAAO;AAAA,MACZ,GAAG,OAAO;AAAA,MACV,IAAI,KAAK,IAAK;AAAA,IACpB;AAAA,EACG;AAED,SAAO;AACT;AAOO,MAAM,sBAAsB,CAAC,aAAa;;AAE/C,MAAI,SAAS,eAAe,KAAK;AAC/B,WAAO,SAAS;AAAA,EACpB,WAAa,SAAS,eAAe,KAAK;AAEtCA,wBAAI,kBAAkB,OAAO;AAC7BA,kBAAAA,MAAI,UAAU;AAAA,MACZ,OAAO;AAAA,MACP,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,SAAS;AACfA,wBAAAA,MAAI,WAAW;AAAA,YACb,KAAK;AAAA,UACjB,CAAW;AAAA,QACF;AAAA,MACF;AAAA,IACP,CAAK;AACD,WAAO,QAAQ,OAAO,IAAI,MAAM,OAAO,CAAC;AAAA,EAC5C,WAAa,SAAS,eAAe,KAAK;AACtC,WAAO,QAAQ,OAAO,IAAI,MAAM,QAAQ,CAAC;AAAA,EAC7C,WAAa,SAAS,cAAc,KAAK;AACrC,WAAO,QAAQ,OAAO,IAAI,MAAM,OAAO,CAAC;AAAA,EAC5C,OAAS;AACL,WAAO,QAAQ,OAAO,IAAI,QAAM,cAAS,SAAT,mBAAe,YAAW,MAAM,CAAC;AAAA,EAClE;AACH;AAOY,MAAC,UAAU,CAAC,YAAY;AAClC,QAAM,EAAE,KAAK,SAAS,OAAO,OAAO,IAAI,UAAU,CAAE,GAAE,GAAG,KAAI,IAAK;AAGlE,QAAM,SAAS,mBAAmB;AAAA,IAChC,KAAK,UAAU,GAAG;AAAA,IAClB;AAAA,IACA;AAAA,IACA,QAAQ,WAAW,OAAO;AAAA,IAC1B,SAAS,WAAW;AAAA,IACpB,GAAG;AAAA,EACP,CAAG;AAED,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,QAAQ;AAAA,MACV,GAAG;AAAA,MACH,SAAS,CAAC,aAAa;AACrB,YAAI;AACF,gBAAM,SAAS,oBAAoB,QAAQ;AAC3C,kBAAQ,MAAM;AAAA,QACf,SAAQ,OAAO;AACd,iBAAO,KAAK;AAAA,QACb;AAAA,MACF;AAAA,MACD,MAAM,CAAC,UAAU;AACf,cAAM,WAAW,IAAI,MAAM,QAAQ;AACnC,iBAAS,gBAAgB;AACzB,eAAO,QAAQ;AAAA,MAChB;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;;;"}